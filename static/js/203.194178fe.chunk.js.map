{"version":3,"file":"static/js/203.194178fe.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Button/Button.module.css?ce6f","components/Button/Button.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/selectors.js","components/ContactForm/ContactForm.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/pages/Phonebook/Phonebook.module.css?1c37","pages/Phonebook/Phonebook.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__RBtNK\"};","import css from './Button.module.css';\n\nexport const Button = ({\n  selected = false,\n  type = 'button',\n  children,\n  ...otherProps\n}) => {\n  return (\n    <button className={css.btn} type={type} {...otherProps}>\n      {children}\n    </button>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactForm_container__qpJ1N\",\"inputs\":\"ContactForm_inputs__x3RUg\",\"margin\":\"ContactForm_margin__1gYiH\",\"label\":\"ContactForm_label__-cVXI\"};","export const selectTasks = state => state.contacts.items;\nexport const selectStatusFilter = state => state.filters;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;","import { useDispatch, useSelector } from 'react-redux';\nimport { Button } from 'components/Button/Button';\nimport css from './ContactForm.module.css';\nimport { selectTasks } from '../../redux/selectors';\nimport { addContact } from '../../redux/operations';\n\nexport const ContactsForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectTasks);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const inputValue = form.elements.text.value;\n    const contactExists = contacts.find(\n      contact => contact.name.toLowerCase() === inputValue.toLowerCase()\n    );\n    if (contactExists) {\n      alert(`${inputValue} is already in contacts.`);\n      return;\n    }\n    dispatch(\n      addContact({\n        name: inputValue,\n        number: form.elements.number.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.container}>\n      <div className={css.margin}>\n        <input\n          className={css.inputs}\n          type=\"text\"\n          name=\"text\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </div>\n      <div className={css.margin}>\n        <input\n          className={css.inputs}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </div>\n      <Button type=\"submit\">Add contact</Button>\n    </form>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"contact__list\":\"ContactList_contact__list__2jNwc\",\"contact__list__item\":\"ContactList_contact__list__item__fOWm7\",\"contact__style\":\"ContactList_contact__style__DpwyW\",\"contact__list__name\":\"ContactList_contact__list__name__wKNQj\",\"contact__list__number\":\"ContactList_contact__list__number__YYFmr\"};","import { Button } from 'components/Button/Button';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/operations';\nimport { selectStatusFilter, selectTasks } from '../../redux/selectors';\nimport css from './ContactList.module.css';\nimport PropTypes from 'prop-types';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectTasks);\n  const filter = useSelector(selectStatusFilter).toLowerCase();\n  const dataNormalize = filter.toLowerCase();\n  const normalizedContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(dataNormalize)\n  );\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <ul className={css.contact__list}>\n        {normalizedContacts.map(contact => (\n          <li key={contact.id} className={css.contact__list__item}>\n            <div className={css.contact__style}>\n              <span className={css.contact__list__name}>{contact.name}</span>\n              :\n              <span className={css.contact__list__number}>\n                {contact.number}\n              </span>\n            </div>\n            <Button onClick={() => dispatch(deleteContact(contact.id))}>\n              Delete\n            </Button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};","// extracted by mini-css-extract-plugin\nexport default {\"filterDiv\":\"Filter_filterDiv__LdeLi\",\"filterlabel\":\"Filter_filterlabel__bhWzn\",\"filter__input\":\"Filter_filter__input__toa89\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { change } from '../../redux/filtersSlice';\nimport { nanoid } from 'nanoid';\nimport { selectStatusFilter } from '../../redux/selectors';\nimport css from './Filter.module.css';\n\nconst filterInputId = nanoid();\n\nexport const ContactFilter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectStatusFilter);\n\n  const onChange = e => {\n    dispatch(change(e.target.value));\n  };\n\n  return (\n    <div className={css.filterDiv}>\n      <label className={css.filterlabel} htmlFor={filterInputId}>Find contacts </label>\n      <input\n        className={css.filter__input}\n        id={filterInputId}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onChange}\n      ></input>\n    </div>\n  );\n};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"one\":\"Phonebook_one__Ijs9o\",\"headertext\":\"Phonebook_headertext__Fif7u\"};","import { ContactsForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactFilter } from 'components/Filter/Filter';\nimport { Loader } from 'components/loader/loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../../redux/operations';\nimport { selectError, selectIsLoading } from '../../redux/selectors';\nimport css from './Phonebook.module.css';\n\nexport default function Phonebook() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.one}>\n      <h2 className={css.headertext}>Phonebook</h2>\n      <ContactsForm></ContactsForm>\n      <h2 className={css.headertext}>Contacts</h2>\n      <ContactFilter></ContactFilter>\n      <ContactList />\n      {isLoading && !error && <Loader />}\n    </div>\n  );\n}"],"names":["Button","_ref","selected","_ref$type","type","children","otherProps","_objectWithoutProperties","_excluded","_jsx","_objectSpread","className","css","selectTasks","state","contacts","items","selectStatusFilter","filters","selectIsLoading","isLoading","selectError","error","ContactsForm","dispatch","useDispatch","useSelector","_jsxs","onSubmit","event","preventDefault","form","target","inputValue","elements","text","value","find","contact","name","toLowerCase","alert","concat","addContact","number","reset","pattern","title","required","ContactList","dataNormalize","normalizedContacts","filter","includes","map","onClick","deleteContact","id","filterInputId","size","arguments","length","undefined","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","ContactFilter","htmlFor","onChange","e","change","Phonebook","useEffect","fetchContacts","Loader"],"sourceRoot":""}